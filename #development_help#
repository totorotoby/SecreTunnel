//Function "Documentation"...

TrashDeck class
	    
*****TrashDeck is backed by vector which means that we can access indices, and the back,
*****and when something is erased everything is compressed and indices change.
*
*
*
*	Void trashCard(Card *toTrash)
*	     Takes in a card and addes it to the trash (TrashDeck) on the top
*
*	Card top()
*	     Returns the top card of the trash
*
*
*	Void printTop()
*	     Prints the top of the trash
*
*	Card takeCard(int index)
*	     erases card at index, and returns the erased card.
*
*
*Player class

***** Player has 5 members, 3 decks (hand (vector), discard (vector), and deck (vector)), and points and name.
***** Constructor starts with begining decks, and shuffles. In a lot of this "back" is really in someways front, because we are pushing and 
***** pulling to the back.
*
*
*
*	Void drawCard()
*	     pops a card from the "top" (back) of deck, and adds it hand. If deck is empty calls shuffDeck()
*
*	Void drawHand()
*	     drawCard 5 times.
*
*
*	Void showHand()
*	     prints the players hand.
*
*	Void showDiscard()
*	     prints the discard pile. This obviously should not be avalible to game users, but is relavent to Harbinger.
*
*
*	Void discardCard(int toDiscard)
*	     pushing hand[toDiscard] to the back of the players discard pile, and erases from hand.
*
*
*	Void discardHand()
*	     keeps discardCard(back of hand) until there are no more cards.
*
*
*	Void gainTopDeck (Card *toGain)
*	     pushes toGain onto back of deck. Only relavent for Bureaucrat.
*
*
*	Void printDtop()
*	     prints the top of the discard pile.
*
*
*	Void trashCard(int toTrash,TrashDeck *trash)
*	     pushing hand[toTrash] to the back of trash, and erases from hand.
*
*
*	Void gainCard(Card *toadd)
*	     pushes toadd to the back of the discard pile.
*
*
*	int deckIsEmpty()
*	    1 if deck doesn't have anything in it, 0 if it does.
*
*
*	void shuffDeck()
*	     shuffles discard and puts it all back into deck.
*
*
*
*BaseDeck class
*
*
***** only memeber is an 7 array of ints, which are the number of cards left in each base pile. 
***** 0 = Copper, 1 = Silver, 2 = Gold, 3 = Estate, 4 = Duchy, 5 = Provience , 6 = Curse
*
*
*	int numLeft(int stackNum)
*	    returns number of cards left in corrisponding stack number
*
*
*
*	void takeCard(int stackNum,Player player)
*	     calls gain card to player on corrispond card in stackNum.
*
*
*ActionDeck class
*
***** Same as base deck but wit 10 entries for action cards, and corrisponding pile number dependent on game being playing.
*
*
*	int numLeft(int stackNum)
*	    returns number of cards left in corrisponding stack number
*
*
*	void takeCard(int stackNum,Player player) ****UNFINISHED AND DOESNT WORK AT ALL*******
*	     calls gain card to player on corrispond card in stackNum.




/* Card Class structure



								Card (Members: cost, type (0 = victory, 1 = treasure, 2 = action), name)
								     	       	     	       		     /|\
															       / | \
															       	            /  |  \
																	       	          /   |   \
																			      	         /    |    \
																					      	         /     |     \
																							       	             /      |      \
																									     	    	          /       |       \
																												  	  	        /        |        \
																																 	       Victory      Tresure    Action
																																	       		    	         (Mem: points) (Mem: value)    (Mem: Atype (0 = nomal action, 1 = reaction, 2 = attack)
																																					       	       	     	       /|\   	      	      /|\     	  	    drawNum
																																								       			      			        / | \      / | \   actionNum
																																															    	     /  |  \     /  |  \   buyNum
																																																     	   Estate.. ... ...     Copper  S... G... value)
(Not sep classes)																																															   	    			     	      /|\
     	 																																																					                 / | \
																																																								                  /  |  \
																																																										     	            /   |   \
																																																												    	               /    |    \
																																																														       	    	               ...discinct cards (no seperate classes for Atype)...

*/